/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as AdminRouteImport } from './routes/_admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PublicRoadmapRouteImport } from './routes/_public/roadmap'
import { Route as PublicChangelogRouteImport } from './routes/_public/changelog'
import { Route as PublicBoardRouteImport } from './routes/_public/board'
import { Route as AdminWikiRouteImport } from './routes/_admin/wiki'
import { Route as AdminSettingsRouteImport } from './routes/_admin/settings'
import { Route as AdminOnboardingRouteImport } from './routes/_admin/onboarding'
import { Route as AdminDashboardRouteImport } from './routes/_admin/dashboard'
import { Route as AdminBoardsRouteImport } from './routes/_admin/boards'
import { Route as PublicBoardIndexRouteImport } from './routes/_public/board/index'
import { Route as PublicBoardPostIdRouteImport } from './routes/_public/board/$postId'

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/_admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRoadmapRoute = PublicRoadmapRouteImport.update({
  id: '/roadmap',
  path: '/roadmap',
  getParentRoute: () => PublicRoute,
} as any)
const PublicChangelogRoute = PublicChangelogRouteImport.update({
  id: '/changelog',
  path: '/changelog',
  getParentRoute: () => PublicRoute,
} as any)
const PublicBoardRoute = PublicBoardRouteImport.update({
  id: '/board',
  path: '/board',
  getParentRoute: () => PublicRoute,
} as any)
const AdminWikiRoute = AdminWikiRouteImport.update({
  id: '/wiki',
  path: '/wiki',
  getParentRoute: () => AdminRoute,
} as any)
const AdminSettingsRoute = AdminSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AdminRoute,
} as any)
const AdminOnboardingRoute = AdminOnboardingRouteImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)
const AdminBoardsRoute = AdminBoardsRouteImport.update({
  id: '/boards',
  path: '/boards',
  getParentRoute: () => AdminRoute,
} as any)
const PublicBoardIndexRoute = PublicBoardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicBoardRoute,
} as any)
const PublicBoardPostIdRoute = PublicBoardPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PublicBoardRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/boards': typeof AdminBoardsRoute
  '/dashboard': typeof AdminDashboardRoute
  '/onboarding': typeof AdminOnboardingRoute
  '/settings': typeof AdminSettingsRoute
  '/wiki': typeof AdminWikiRoute
  '/board': typeof PublicBoardRouteWithChildren
  '/changelog': typeof PublicChangelogRoute
  '/roadmap': typeof PublicRoadmapRoute
  '/board/$postId': typeof PublicBoardPostIdRoute
  '/board/': typeof PublicBoardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/boards': typeof AdminBoardsRoute
  '/dashboard': typeof AdminDashboardRoute
  '/onboarding': typeof AdminOnboardingRoute
  '/settings': typeof AdminSettingsRoute
  '/wiki': typeof AdminWikiRoute
  '/changelog': typeof PublicChangelogRoute
  '/roadmap': typeof PublicRoadmapRoute
  '/board/$postId': typeof PublicBoardPostIdRoute
  '/board': typeof PublicBoardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_admin': typeof AdminRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/auth': typeof AuthRoute
  '/_admin/boards': typeof AdminBoardsRoute
  '/_admin/dashboard': typeof AdminDashboardRoute
  '/_admin/onboarding': typeof AdminOnboardingRoute
  '/_admin/settings': typeof AdminSettingsRoute
  '/_admin/wiki': typeof AdminWikiRoute
  '/_public/board': typeof PublicBoardRouteWithChildren
  '/_public/changelog': typeof PublicChangelogRoute
  '/_public/roadmap': typeof PublicRoadmapRoute
  '/_public/board/$postId': typeof PublicBoardPostIdRoute
  '/_public/board/': typeof PublicBoardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/boards'
    | '/dashboard'
    | '/onboarding'
    | '/settings'
    | '/wiki'
    | '/board'
    | '/changelog'
    | '/roadmap'
    | '/board/$postId'
    | '/board/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/boards'
    | '/dashboard'
    | '/onboarding'
    | '/settings'
    | '/wiki'
    | '/changelog'
    | '/roadmap'
    | '/board/$postId'
    | '/board'
  id:
    | '__root__'
    | '/'
    | '/_admin'
    | '/_public'
    | '/auth'
    | '/_admin/boards'
    | '/_admin/dashboard'
    | '/_admin/onboarding'
    | '/_admin/settings'
    | '/_admin/wiki'
    | '/_public/board'
    | '/_public/changelog'
    | '/_public/roadmap'
    | '/_public/board/$postId'
    | '/_public/board/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
  AuthRoute: typeof AuthRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_admin': {
      id: '/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/roadmap': {
      id: '/_public/roadmap'
      path: '/roadmap'
      fullPath: '/roadmap'
      preLoaderRoute: typeof PublicRoadmapRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/changelog': {
      id: '/_public/changelog'
      path: '/changelog'
      fullPath: '/changelog'
      preLoaderRoute: typeof PublicChangelogRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/board': {
      id: '/_public/board'
      path: '/board'
      fullPath: '/board'
      preLoaderRoute: typeof PublicBoardRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_admin/wiki': {
      id: '/_admin/wiki'
      path: '/wiki'
      fullPath: '/wiki'
      preLoaderRoute: typeof AdminWikiRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_admin/settings': {
      id: '/_admin/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AdminSettingsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_admin/onboarding': {
      id: '/_admin/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof AdminOnboardingRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_admin/dashboard': {
      id: '/_admin/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_admin/boards': {
      id: '/_admin/boards'
      path: '/boards'
      fullPath: '/boards'
      preLoaderRoute: typeof AdminBoardsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_public/board/': {
      id: '/_public/board/'
      path: '/'
      fullPath: '/board/'
      preLoaderRoute: typeof PublicBoardIndexRouteImport
      parentRoute: typeof PublicBoardRoute
    }
    '/_public/board/$postId': {
      id: '/_public/board/$postId'
      path: '/$postId'
      fullPath: '/board/$postId'
      preLoaderRoute: typeof PublicBoardPostIdRouteImport
      parentRoute: typeof PublicBoardRoute
    }
  }
}

interface AdminRouteChildren {
  AdminBoardsRoute: typeof AdminBoardsRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminOnboardingRoute: typeof AdminOnboardingRoute
  AdminSettingsRoute: typeof AdminSettingsRoute
  AdminWikiRoute: typeof AdminWikiRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminBoardsRoute: AdminBoardsRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminOnboardingRoute: AdminOnboardingRoute,
  AdminSettingsRoute: AdminSettingsRoute,
  AdminWikiRoute: AdminWikiRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface PublicBoardRouteChildren {
  PublicBoardPostIdRoute: typeof PublicBoardPostIdRoute
  PublicBoardIndexRoute: typeof PublicBoardIndexRoute
}

const PublicBoardRouteChildren: PublicBoardRouteChildren = {
  PublicBoardPostIdRoute: PublicBoardPostIdRoute,
  PublicBoardIndexRoute: PublicBoardIndexRoute,
}

const PublicBoardRouteWithChildren = PublicBoardRoute._addFileChildren(
  PublicBoardRouteChildren,
)

interface PublicRouteChildren {
  PublicBoardRoute: typeof PublicBoardRouteWithChildren
  PublicChangelogRoute: typeof PublicChangelogRoute
  PublicRoadmapRoute: typeof PublicRoadmapRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicBoardRoute: PublicBoardRouteWithChildren,
  PublicChangelogRoute: PublicChangelogRoute,
  PublicRoadmapRoute: PublicRoadmapRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
  AuthRoute: AuthRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
